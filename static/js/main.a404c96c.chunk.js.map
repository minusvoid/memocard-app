{"version":3,"sources":["components/cardinput.tsx","components/carditem.tsx","components/cardlist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardInput","addCards","cards","useState","inputTitle","setInputTitle","length","count","setCount","className","type","value","onChange","e","target","onClick","id","title","discription","pinned","CardItem","card","handlePinned","handleDelete","defaultChecked","CardList","prev","map","t","pimmed","filter","initialState","App","setCards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAiDeA,EAzCoB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAC/C,EAAsCC,mBAAiB,IAAvD,mBAAQC,EAAR,KAAoBC,EAApB,KACA,EAA4BF,mBAAkBD,EAAMI,OAAQ,GAA5D,mBAAQC,EAAR,KAAeC,EAAf,KAoBA,OACC,8BACC,qBAAKC,UAAU,YAAf,SACC,sBAAKA,UAAU,QAAf,UACC,uBACCC,KAAK,OACLD,UAAU,QACVE,MAAOP,EACPQ,SA1BqB,SAAEC,GAC3BR,EAAeQ,EAAEC,OAAOH,UA2BrB,wBAAQI,QAxBS,WACpBP,EAAUD,EAAO,GASjBN,EAAS,CAPY,CACpBe,GAAIT,EACJU,MAAOb,EACPc,YAAa,cACbC,QAAQ,IAGD,mBAAejB,KACvBG,EAAc,KAaoBI,UAAU,iBAAzC,yB,OCXUW,EApBmB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACxD,OACC,qBAAId,UAAWY,EAAKF,OAAS,SAAW,GAAxC,UACC,kCACC,uBAAOT,KAAK,WACZD,UAAU,iBACVM,QAAS,kBAAMO,EAAaD,IAC5BG,eAAgBH,EAAKF,SAErB,sBAAMV,UAAU,iBAAhB,SAAmCY,EAAKJ,WAEzC,wBACAF,QAAS,kBAAMQ,EAAaF,IAC5BZ,UAAU,aAFV,wBCwBYgB,EAnCmB,SAAC,GAAyB,IAAvBvB,EAAsB,EAAtBA,MAAOD,EAAe,EAAfA,SAErCqB,EAAe,SAACD,GACrBpB,GAAU,SAAAyB,GAAI,OAAIA,EAAKC,KAAK,SAAAC,GAAC,OAC5BA,EAAEZ,KAAOK,EAAKL,GAAd,2BACOK,GADP,IACaQ,QAASR,EAAKF,SACzBS,SAIEL,EAAe,SAACF,GACrBpB,GAAU,SAAAyB,GAAI,OAAIA,EAAKI,QAAQ,SAAAF,GAAC,OAC/BA,EAAEZ,KAAOK,EAAKL,UAIhB,OACC,qBAAKP,UAAU,QAAf,SAEEP,EAAMI,QAAU,EAAI,iBACpB,oBAAIG,UAAU,YAAd,SACGP,EAAMyB,KAAK,SAAAN,GAAI,OAChB,cAAC,EAAD,CAECA,KAAMA,EACNC,aAAcA,EACdC,aAAcA,GAHTF,EAAKL,YC3BXe,EAAuB,CAC5B,CACCf,GAAI,EACJC,MAAO,UACPC,YAAa,eACbC,QAAQ,GACP,CACDH,GAAI,EACJC,MAAO,UACPC,YAAa,cACbC,QAAQ,IAeKa,EAXM,WACpB,MAA4B7B,mBAAS4B,GAArC,mBAAQ7B,EAAR,KAAe+B,EAAf,KAEA,OACC,gCACC,cAAC,EAAD,CAAWhC,SAAUgC,EAAU/B,MAAOA,IACtC,cAAC,EAAD,CAAUD,SAAUgC,EAAU/B,MAAOA,QCXzBgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a404c96c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Card } from './types';\n\ntype Props = {\n\tcards: Card[]\n\taddCards: React.Dispatch<React.SetStateAction<Card[]>>\n}\n\nconst CardInput: React.FC<Props> = ({ addCards, cards}) => {\n\tconst [ inputTitle, setInputTitle ] = useState<string>('')\n\tconst [ count, setCount ] = useState<number>( cards.length +1 )\n\n\tconst handleInputChange = ( e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetInputTitle( e.target.value )\n\t}\n\n\tconst handleSubmit = () => {\n\t\tsetCount( count +1 )\n\n\t\tconst newCard: Card ={\n\t\t\tid: count,\n\t\t\ttitle: inputTitle,\n\t\t\tdiscription: 'Discription',\n\t\t\tpinned: false,\n\t\t}\n\n\t\taddCards([ newCard, ...cards ])\n\t\tsetInputTitle('')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"imputForm\">\n\t\t\t\t<div className=\"inner\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\tvalue={inputTitle}\n\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={handleSubmit} className=\"btn is-primary\">\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default CardInput;","import React from 'react';\nimport { Card } from './types';\n\ntype Props = {\n\tcard: Card\n\thandlePinned: (card: Card) => void\n\thandleDelete: (card: Card) => void\n}\n\nconst CardItem: React.FC<Props> = ({ card, handlePinned, handleDelete }) => {\n\treturn (\n\t\t<li className={card.pinned ? 'pimmed' : ''}>\n\t\t\t<label>\n\t\t\t\t<input type=\"checkbox\"\n\t\t\t\tclassName=\"checkbox-input\"\n\t\t\t\tonClick={() => handlePinned(card)}\n\t\t\t\tdefaultChecked={card.pinned}\n\t\t\t\t/>\n\t\t\t\t<span className=\"checkbox-label\">{ card.title }</span>\n\t\t\t</label>\n\t\t\t<button\n\t\t\tonClick={() => handleDelete(card)}\n\t\t\tclassName=\"btn delete\">\n\t\t\t\tDelete\n\t\t\t</button>\n\t\t</li>\n\t)\n}\n\nexport default CardItem;","import React from 'react';\nimport { Card } from './types';\nimport CardItem from './carditem';\n\ntype Props = {\n\tcards: Card[]\n\taddCards:React.Dispatch<React.SetStateAction<Card[]>>\n}\n\nconst CardList: React.FC<Props> = ({ cards, addCards }) => {\n\n\tconst handlePinned = (card: Card) => {\n\t\taddCards( prev => prev.map( t =>\n\t\t\tt.id === card.id\n\t\t\t? { ...card, pimmed: !card.pinned }\n\t\t\t: t\n\t\t))\n\t}\n\n\tconst handleDelete = (card: Card) => {\n\t\taddCards( prev => prev.filter( t =>\n\t\t\tt.id !== card.id\n\t\t))\n\t}\n\n\treturn (\n\t\t<div className=\"inner\">\n\t\t\t{\n\t\t\t\tcards.length <= 0 ? 'No Card saved!' :\n\t\t\t\t<ul className=\"card-list\">\n\t\t\t\t\t{ cards.map( card => (\n\t\t\t\t\t\t<CardItem\n\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\tcard={card}\n\t\t\t\t\t\t\thandlePinned={handlePinned}\n\t\t\t\t\t\t\thandleDelete={handleDelete}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\t}\n\t\t\t\t</ul>\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CardList;","import React, { useState } from 'react';\nimport { Card } from './components/types'\nimport CardInput from './components/cardinput';\nimport CardList from './components/cardlist';\n\nconst initialState: Card[] = [\n\t{\n\t\tid: 2,\n\t\ttitle: 'Title 2',\n\t\tdiscription: 'Discriptions',\n\t\tpinned: false,\n\t},{\n\t\tid: 1,\n\t\ttitle: 'Title 1',\n\t\tdiscription: 'disciptions',\n\t\tpinned: true,\n\t}\n]\n\nconst App: React.FC =() => {\n\tconst [ cards, setCards ] = useState(initialState)\n\n\treturn (\n\t\t<div>\n\t\t\t<CardInput addCards={setCards} cards={cards} />\n\t\t\t<CardList addCards={setCards} cards={cards} />\n\t\t</div>\n\t)\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}